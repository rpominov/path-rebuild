// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("./Jest.bs.js");
var Curry = require("@rescript/std/lib/js/curry.js");
var Js_exn = require("@rescript/std/lib/js/js_exn.js");
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var PathRebuild = require("../PathRebuild.bs.js");
var Caml_js_exceptions = require("@rescript/std/lib/js/caml_js_exceptions.js");

function msg(err) {
  if (err.TAG === /* Ok */0) {
    return Js_exn.raiseError("Not a Error(_)");
  } else {
    return err._0;
  }
}

Jest.each([
      "test/{1..0}/{-2}.js",
      "test/{2..1}/{-2}.js",
      "test/{-1..1}/{-2}.js",
      "test/{-1..-2}/{-2}.js",
      "test/{1..0a}/{-2}.js",
      "test/{0a}/{-2}.js",
      "{-2}.js\\",
      "foo/{-2..",
      "test/{1..2.1}/{-2}.js",
      "test/{1...2}/{-2}.js",
      "test/{1.2}/{-2}.js",
      "test/{1\\..2}/{-2}.js",
      "test/{1{..2}/{-2}.js",
      "test/{1/..2}/{-2}.js",
      "test}/{1..2}/{-2}.js"
    ], "Parse errors %s", (function (pattern) {
        expect(msg(PathRebuild.make(pattern))).toMatchSnapshot();
        
      }));

Jest.each3([
      [
        "{10}",
        "file.sql",
        ""
      ],
      [
        "{10}/",
        "file.sql",
        ""
      ],
      [
        "/{10}/",
        "file.sql",
        "/"
      ],
      [
        "{-10}",
        "file.sql",
        ""
      ],
      [
        "{-10}/",
        "file.sql",
        ""
      ],
      [
        "/{-10}/",
        "file.sql",
        "/"
      ],
      [
        "{0}",
        "file.sql",
        "file"
      ],
      [
        "{-2}",
        "file.sql",
        "file"
      ],
      [
        "{-2}",
        "file",
        "file"
      ],
      [
        "{-2}",
        ".file",
        ".file"
      ],
      [
        "{-1}",
        "file",
        ""
      ],
      [
        "{-1}",
        ".file",
        ""
      ],
      [
        "{1}",
        "file.sql",
        ".sql"
      ],
      [
        "{0}{1}",
        "file.sql",
        "file.sql"
      ],
      [
        "{0}/{1}",
        "file.sql",
        "file/.sql"
      ],
      [
        "{0..-2}.js",
        "file.sql",
        "file.js"
      ],
      [
        "{-2..-1}",
        "file.sql",
        "file.sql"
      ],
      [
        "{-2..-1}",
        "a/b/file.sql",
        "file.sql"
      ],
      [
        "{0..-2}.js",
        "a/b/file.sql",
        "a/b/file.js"
      ],
      [
        "{0..-3}/__test__/{-2}.test{-1}",
        "a/b/file.sql",
        "a/b/__test__/file.test.sql"
      ],
      [
        "{0..-3}_test/{-2..-1}",
        "a/b/file.sql",
        "a/b_test/file.sql"
      ],
      [
        "test_{0..-1}",
        "a/b/file.sql",
        "test_a/b/file.sql"
      ],
      [
        "test/{0..-1}",
        "a/b/file.sql",
        "test/a/b/file.sql"
      ],
      [
        "/test/{0..-1}",
        "a/b/file.sql",
        "/test/a/b/file.sql"
      ],
      [
        "/{0..-1}",
        "a/b/file.sql",
        "/a/b/file.sql"
      ],
      [
        "{0..-3}/{-2}.js",
        "file.sql",
        "file.js"
      ],
      [
        "{0..-4}/{-2}.js",
        "a/b/c/d/file.sql",
        "a/b/c/file.js"
      ]
    ], "Transform %s + %s = %s", (function (pattern, path, result) {
        var transform = Belt_Result.getExn(PathRebuild.make(pattern));
        expect(Belt_Result.getExn(Curry._2(transform, "/", path))).toBe(result);
        
      }));

test("Unconventional separator", (function () {
        var transform = Belt_Result.getExn(PathRebuild.make("{0..-4}/{-2}.js"));
        expect(Belt_Result.getExn(Curry._2(transform, "#", "a#b#c#d#file.sql"))).toBe("a#b#c#file.js");
        
      }));

test("Default separator", (function () {
        var transform = Belt_Result.getExn(PathRebuild.make("{0..-4}/{-2}.js"));
        expect(Belt_Result.getExn(Curry._2(transform, undefined, "a/b/c/d/file.sql"))).toEqual("a/b/c/file.js");
        
      }));

test("Absolute path", (function () {
        var transform = Belt_Result.getExn(PathRebuild.make("{0..-3}/{-2}.js"));
        expect(msg(Curry._2(transform, undefined, "/file.sql"))).toMatchSnapshot();
        
      }));

test("transformExn parse error", (function () {
        var err;
        try {
          err = {
            TAG: /* Ok */0,
            _0: PathRebuild.transformExn("foo/{-2..")
          };
        }
        catch (raw_err){
          var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err);
          if (err$1.RE_EXN_ID === Js_exn.$$Error) {
            var m = err$1._1.message;
            err = m !== undefined ? ({
                  TAG: /* Error */1,
                  _0: m
                }) : ({
                  TAG: /* Error */1,
                  _0: "Without message"
                });
          } else {
            throw err$1;
          }
        }
        expect(msg(err)).toMatchSnapshot();
        
      }));

test("transformExn print error", (function () {
        var err;
        try {
          err = {
            TAG: /* Ok */0,
            _0: PathRebuild.transformExn("{0..-1}")(undefined, "/foo/bar.js")
          };
        }
        catch (raw_err){
          var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err);
          if (err$1.RE_EXN_ID === Js_exn.$$Error) {
            var m = err$1._1.message;
            err = m !== undefined ? ({
                  TAG: /* Error */1,
                  _0: m
                }) : ({
                  TAG: /* Error */1,
                  _0: "Without message"
                });
          } else {
            throw err$1;
          }
        }
        expect(msg(err)).toMatchSnapshot();
        
      }));

test("transformExn no errors", (function () {
        expect(PathRebuild.transformExn("{0..-2}.json")("/", "foo/bar.js")).toBe("foo/bar.json");
        
      }));

exports.msg = msg;
/*  Not a pure module */
